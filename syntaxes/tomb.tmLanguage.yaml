name: TOMB
scopeName: source.tomb
fileTypes:
    - .tmb
    - .tomb
uuid: f7de61e2-bdde-4e2a-a139-8221b179584e
patterns:
    -
        include: '#preprocessor'
    -
        include: '#comment'
    -
        include: '#directives'
    -
        include: '#declarations'
    -
        include: '#script-top-level'
repository:
    directives:
        patterns:
            -
                include: '#extern-alias-directive'
            -
                include: '#using-directive'
            -
                include: '#attribute-section'
            -
                include: '#punctuation-semicolon'
    declarations:
        patterns:
            -
                include: '#namespace-declaration'
            -
                include: '#type-declarations'
            -
                include: '#punctuation-semicolon'
    script-top-level:
        patterns:
            -
                include: '#method-declaration'
            -
                include: '#statement'
            -
                include: '#punctuation-semicolon'
    type-declarations:
        patterns:
            -
                include: '#preprocessor'
            -
                include: '#comment'
            -
                include: '#class-declaration'
            -
                include: '#struct-declaration'
            -
                include: '#attribute-section'
            -
                include: '#punctuation-semicolon'
    class-or-struct-members:
        patterns:
            -
                include: '#preprocessor'
            -
                include: '#comment'
            -
                include: '#field-declaration'
            -
                include: '#event-declaration'
            -
                include: '#indexer-declaration'
            -
                include: '#variable-initializer'
            -
                include: '#constructor-declaration'
            -
                include: '#destructor-declaration'
            -
                include: '#operator-declaration'
            -
                include: '#conversion-operator-declaration'
            -
                include: '#method-declaration'
            -
                include: '#attribute-section'
            -
                include: '#punctuation-semicolon'
    interface-members:
        patterns:
            -
                include: '#preprocessor'
            -
                include: '#comment'
            -
                include: '#property-declaration'
            -
                include: '#event-declaration'
            -
                include: '#indexer-declaration'
            -
                include: '#method-declaration'
            -
                include: '#attribute-section'
            -
                include: '#punctuation-semicolon'
    statement:
        patterns:
            -
                include: '#preprocessor'
            -
                include: '#comment'
            -
                include: '#while-statement'
            -
                include: '#do-statement'
            -
                include: '#for-statement'
            -
                include: '#foreach-statement'
            -
                include: '#if-statement'
            -
                include: '#else-part'
            -
                include: '#switch-statement'
            -
                include: '#goto-statement'
            -
                include: '#return-statement'
            -
                include: '#break-or-continue-statement'
            -
                include: '#throw-statement'
            -
                include: '#yield-statement'
            -
                include: '#await-statement'
            -
                include: '#try-statement'
            -
                include: '#checked-unchecked-statement'
            -
                include: '#lock-statement'
            -
                include: '#using-statement'
            -
                include: '#labeled-statement'
            -
                include: '#local-declaration'
            -
                include: '#block'
            -
                include: '#expression'
            -
                include: '#punctuation-semicolon'
    expression:
        patterns:
            -
                include: '#preprocessor'
            -
                include: '#comment'
            -
                include: '#checked-unchecked-expression'
            -
                include: '#typeof-or-default-expression'
            -
                include: '#nameof-expression'
            -
                include: '#throw-expression'
            -
                include: '#interpolated-string'
            -
                include: '#verbatim-interpolated-string'
            -
                include: '#this-or-base-expression'
            -
                include: '#conditional-operator'
            -
                include: '#expression-operators'
            -
                include: '#await-expression'
            -
                include: '#query-expression'
            -
                include: '#as-expression'
            -
                include: '#is-expression'
            -
                include: '#anonymous-method-expression'
            -
                include: '#object-creation-expression'
            -
                include: '#array-creation-expression'
            -
                include: '#anonymous-object-creation-expression'
            -
                include: '#invocation-expression'
            -
                include: '#member-access-expression'
            -
                include: '#element-access-expression'
            -
                include: '#cast-expression'
            -
                include: '#literal'
            -
                include: '#parenthesized-expression'
            -
                include: '#tuple-deconstruction-assignment'
            -
                include: '#initializer-expression'
            -
                include: '#identifier'
    extern-alias-directive:
        begin: '\s*(extern)\b\s*(alias)\b\s*(@?[_[:alpha:]][_[:alnum:]]*)'
        beginCaptures:
            '1':
                name: keyword.other.extern.tomb
            '2':
                name: keyword.other.alias.tomb
            '3':
                name: variable.other.alias.tomb
        end: '(?=;)'
    using-directive:
        patterns:
            -
                begin: \b(using)\b\s+(static)\s+
                beginCaptures:
                    '1': {name: keyword.other.using.tomb}
                    '2': {name: keyword.other.static.tomb}
                end: '(?=;)'
                patterns:
                    - {include: '#type'}
            -
                begin: '\b(using)\s+(?=(@?[_[:alpha:]][_[:alnum:]]*)\s*=)'
                beginCaptures:
                    '1': {name: keyword.other.using.tomb}
                    '2': {name: entity.name.type.alias.tomb}
                end: '(?=;)'
                patterns:
                    - {include: '#comment'}
                    - {include: '#type'}
                    - {include: '#operator-assignment'}
            -
                begin: '\b(using)\s*'
                beginCaptures:
                    '1': {name: keyword.other.using.tomb}
                end: '(?=;)'
                patterns:
                    - {include: '#comment'}
                    - {name: entity.name.type.namespace.tomb, match: '@?[_[:alpha:]][_[:alnum:]]*'}
                    - {include: '#operator-assignment'}
    attribute-section:
        begin: '(\[)(assembly|module|field|event|method|param|property|return|type)?(\:)?'
        beginCaptures:
            '1':
                name: punctuation.squarebracket.open.tomb
            '2':
                name: keyword.other.attribute-specifier.tomb
            '3':
                name: punctuation.separator.colon.tomb
        end: '(\])'
        endCaptures:
            '1':
                name: punctuation.squarebracket.close.tomb
        patterns:
            -
                include: '#comment'
            -
                include: '#attribute'
            -
                include: '#punctuation-comma'
    attribute:
        patterns:
            -
                include: '#type-name'
            -
                include: '#attribute-arguments'
    attribute-arguments:
        begin: (\()
        beginCaptures:
            '1':
                name: punctuation.parenthesis.open.tomb
        end: (\))
        endCaptures:
            '1':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#attribute-named-argument'
            -
                include: '#expression'
            -
                include: '#punctuation-comma'
    attribute-named-argument:
        begin: '(@?[_[:alpha:]][_[:alnum:]]*)\s*(?==)'
        beginCaptures:
            '1':
                name: entity.name.variable.property.tomb
        end: '(?=(,|\)))'
        patterns:
            -
                include: '#operator-assignment'
            -
                include: '#expression'
    namespace-declaration:
        begin: \b(namespace)\s+
        beginCaptures:
            '1':
                name: keyword.other.namespace.tomb
        end: '(?<=\})'
        patterns:
            -
                include: '#comment'
            -
                name: entity.name.type.namespace.tomb
                match: '@?[_[:alpha:]][_[:alnum:]]*'
            -
                include: '#punctuation-accessor'
            -
                begin: '\{'
                beginCaptures:
                    '0': {name: punctuation.curlybrace.open.tomb}
                end: '\}'
                endCaptures:
                    '0': {name: punctuation.curlybrace.close.tomb}
                patterns:
                    - {include: '#declarations'}
                    - {include: '#using-directive'}
                    - {include: '#punctuation-semicolon'}
    storage-modifier:
        name: storage.modifier.tomb
        match: '(?<!\.)\b(public|private)\b'
    class-declaration:
        begin: '(?=\bclass\b)'
        end: '(?<=\})'
        patterns:
            -
                begin: "(?x)\r\n\\b(token|nft)\\b\\s+\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*"
                beginCaptures:
                    '1': {name: keyword.other.class.tomb}
                    '2': {name: entity.name.type.class.tomb}
                end: '(?=\{)'
                patterns:
                    - {include: '#comment'}
                    - {include: '#type-parameter-list'}
                    - {include: '#base-types'}
                    - {include: '#generic-constraints'}
            -
                begin: '\{'
                beginCaptures:
                    '0': {name: punctuation.curlybrace.open.tomb}
                end: '\}'
                endCaptures:
                    '0': {name: punctuation.curlybrace.close.tomb}
                patterns:
                    - {include: '#class-or-struct-members'}
            -
                include: '#preprocessor'
            -
                include: '#comment'
    delegate-declaration:
        begin: "(?x)\r\n(?:\\b(delegate)\\b)\\s+\r\n(?<type-name>\r\n  (?:\r\n    (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\s*\r\n(<([^<>]+)>)?\\s*\r\n(?=\\()"
        beginCaptures:
            '1':
                name: keyword.other.delegate.tomb
            '2':
                patterns:
                    - {include: '#type'}
            '7':
                name: entity.name.type.delegate.tomb
            '8':
                patterns:
                    - {include: '#type-parameter-list'}
        end: '(?=;)'
        patterns:
            -
                include: '#comment'
            -
                include: '#parenthesized-parameter-list'
            -
                include: '#generic-constraints'
    enum-declaration:
        begin: '(?=\benum\b)'
        end: '(?<=\})'
        patterns:
            -
                begin: '(?=enum)'
                end: '(?=\{)'
                patterns:
                    - {include: '#comment'}
                    - {match: '(enum)\s+(@?[_[:alpha:]][_[:alnum:]]*)', captures: {'1': {name: keyword.other.enum.tomb}, '2': {name: entity.name.type.enum.tomb}}}
                    - {begin: ':', beginCaptures: {'0': {name: punctuation.separator.colon.tomb}}, end: '(?=\{)', patterns: [{include: '#type'}]}
            -
                begin: '\{'
                beginCaptures:
                    '0': {name: punctuation.curlybrace.open.tomb}
                end: '\}'
                endCaptures:
                    '0': {name: punctuation.curlybrace.close.tomb}
                patterns:
                    - {include: '#preprocessor'}
                    - {include: '#comment'}
                    - {include: '#attribute-section'}
                    - {include: '#punctuation-comma'}
                    - {begin: '@?[_[:alpha:]][_[:alnum:]]*', beginCaptures: {'0': {name: entity.name.variable.enum-member.tomb}}, end: '(?=(,|\}))', patterns: [{include: '#comment'}, {include: '#variable-initializer'}]}
            -
                include: '#preprocessor'
            -
                include: '#comment'
    interface-declaration:
        begin: '(?=\binterface\b)'
        end: '(?<=\})'
        patterns:
            -
                begin: "(?x)\r\n(interface)\\b\\s+\r\n(@?[_[:alpha:]][_[:alnum:]]*)"
                beginCaptures:
                    '1': {name: keyword.other.interface.tomb}
                    '2': {name: entity.name.type.interface.tomb}
                end: '(?=\{)'
                patterns:
                    - {include: '#comment'}
                    - {include: '#type-parameter-list'}
                    - {include: '#base-types'}
                    - {include: '#generic-constraints'}
            -
                begin: '\{'
                beginCaptures:
                    '0': {name: punctuation.curlybrace.open.tomb}
                end: '\}'
                endCaptures:
                    '0': {name: punctuation.curlybrace.close.tomb}
                patterns:
                    - {include: '#interface-members'}
            -
                include: '#preprocessor'
            -
                include: '#comment'
    struct-declaration:
        begin: '(?=\bstruct\b)'
        end: '(?<=\})'
        patterns:
            -
                begin: "(?x)\r\n(struct)\\b\\s+\r\n(@?[_[:alpha:]][_[:alnum:]]*)"
                beginCaptures:
                    '1': {name: keyword.other.struct.tomb}
                    '2': {name: entity.name.type.struct.tomb}
                end: '(?=\{)'
                patterns:
                    - {include: '#comment'}
                    - {include: '#generic-constraints'}
            -
                begin: '\{'
                beginCaptures:
                    '0': {name: punctuation.curlybrace.open.tomb}
                end: '\}'
                endCaptures:
                    '0': {name: punctuation.curlybrace.close.tomb}
                patterns:
                    - {include: '#class-or-struct-members'}
            -
                include: '#preprocessor'
            -
                include: '#comment'
    type-parameter-list:
        begin: \<
        beginCaptures:
            '0':
                name: punctuation.definition.typeparameters.begin.tomb
        end: \>
        endCaptures:
            '0':
                name: punctuation.definition.typeparameters.end.tomb
        patterns:
            -
                match: \b(in|out)\b
                captures:
                    '1': {name: storage.modifier.tomb}
            -
                match: '(@?[_[:alpha:]][_[:alnum:]]*)\b'
                captures:
                    '1': {name: entity.name.type.type-parameter.tomb}
            -
                include: '#comment'
            -
                include: '#punctuation-comma'
            -
                include: '#attribute-section'
    base-types:
        begin: ':'
        beginCaptures:
            '0':
                name: punctuation.separator.colon.tomb
        end: '(?=\{|where)'
        patterns:
            -
                include: '#type'
            -
                include: '#punctuation-comma'
            -
                include: '#preprocessor'
    generic-constraints:
        begin: '(where)\s+(@?[_[:alpha:]][_[:alnum:]]*)\s*(:)'
        beginCaptures:
            '1':
                name: keyword.other.where.tomb
            '2':
                name: storage.type.tomb
            '3':
                name: punctuation.separator.colon.tomb
        end: '(?=\{|where|;|=>)'
        patterns:
            -
                name: keyword.other.class.tomb
                match: \bclass\b
            -
                name: keyword.other.struct.tomb
                match: \bstruct\b
            -
                match: '(new)\s*(\()\s*(\))'
                captures:
                    '1': {name: keyword.other.new.tomb}
                    '2': {name: punctuation.parenthesis.open.tomb}
                    '3': {name: punctuation.parenthesis.close.tomb}
            -
                include: '#type'
            -
                include: '#punctuation-comma'
            -
                include: '#generic-constraints'
    field-declaration:
        begin: "(?x)\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_:[:alpha:] ][_:[:alnum:] ]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\s* # first field name\r\n(?!=>|==)(?=,|;|=|$)"
        beginCaptures:
            '1':
                patterns:
                    - {include: '#type'}
            '6':
                name: entity.name.variable.field.tomb
        end: '(?=;)'
        patterns:
            -
                name: entity.name.variable.field.tomb
                match: '@?[_:[:alpha:]][_:[:alnum:]]*'
            -
                include: '#punctuation-comma'
            -
                include: '#comment'
            -
                include: '#variable-initializer'
            -
                include: '#class-or-struct-members'
    property-declaration:
        begin: "(?x)\r\n\r\n# The negative lookahead below ensures that we don't match nested types\r\n# or other declarations as properties.\r\n(?![[:word:][:space:]]*\\b(?:class|interface|struct|enum|event)\\b)\r\n\r\n(?<return-type>\r\n  (?<type-name>\r\n    (?:\r\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\\s+\r\n)\r\n(?<interface-name>\\g<type-name>\\s*\\.\\s*)?\r\n(?<property-name>\\g<identifier>)\\s*\r\n(?=\\{|=>|$)"
        beginCaptures:
            '1':
                patterns:
                    - {include: '#type'}
            '7':
                patterns:
                    - {include: '#type'}
                    - {include: '#punctuation-accessor'}
            '8':
                name: entity.name.variable.property.tomb
        end: '(?<=\})|(?=;)'
        patterns:
            -
                include: '#comment'
            -
                include: '#property-accessors'
            -
                include: '#expression-body'
            -
                include: '#variable-initializer'
            -
                include: '#class-or-struct-members'
    indexer-declaration:
        begin: "(?x)\r\n(?<return-type>\r\n  (?<type-name>\r\n    (?:\r\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\\s+\r\n)\r\n(?<interface-name>\\g<type-name>\\s*\\.\\s*)?\r\n(?<indexer-name>this)\\s*\r\n(?=\\[)"
        beginCaptures:
            '1':
                patterns:
                    - {include: '#type'}
            '7':
                patterns:
                    - {include: '#type'}
                    - {include: '#punctuation-accessor'}
            '8':
                name: keyword.other.this.tomb
        end: '(?<=\})|(?=;)'
        patterns:
            -
                include: '#comment'
            -
                include: '#bracketed-parameter-list'
            -
                include: '#property-accessors'
            -
                include: '#expression-body'
            -
                include: '#variable-initializer'
    event-declaration:
        begin: "(?x)\r\n\\b(event)\\b\\s*\r\n(?<return-type>\r\n  (?<type-name>\r\n    (?:\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\\s+\r\n)\r\n(?<interface-name>\\g<type-name>\\s*\\.\\s*)?\r\n(?<event-names>\\g<identifier>(?:\\s*,\\s*\\g<identifier>)*)\\s*\r\n(?=\\{|;|$)"
        beginCaptures:
            '1':
                name: keyword.other.event.tomb
            '2':
                patterns:
                    - {include: '#type'}
            '8':
                patterns:
                    - {include: '#type'}
                    - {include: '#punctuation-accessor'}
            '9':
                patterns:
                    - {name: entity.name.variable.event.tomb, match: '@?[_[:alpha:]][_[:alnum:]]*'}
                    - {include: '#punctuation-comma'}
        end: '(?<=\})|(?=;)'
        patterns:
            -
                include: '#comment'
            -
                include: '#event-accessors'
            -
                include: '#punctuation-comma'
    property-accessors:
        begin: '\{'
        beginCaptures:
            '0':
                name: punctuation.curlybrace.open.tomb
        end: '\}'
        endCaptures:
            '0':
                name: punctuation.curlybrace.close.tomb
        patterns:
            -
                name: storage.modifier.tomb
                match: \b(private|protected|internal)\b
            -
                name: keyword.other.get.tomb
                match: \b(get)\b
            -
                name: keyword.other.set.tomb
                match: \b(set)\b
            -
                include: '#comment'
            -
                include: '#attribute-section'
            -
                include: '#expression-body'
            -
                include: '#block'
            -
                include: '#punctuation-semicolon'
    event-accessors:
        begin: '\{'
        beginCaptures:
            '0':
                name: punctuation.curlybrace.open.tomb
        end: '\}'
        endCaptures:
            '0':
                name: punctuation.curlybrace.close.tomb
        patterns:
            -
                name: keyword.other.add.tomb
                match: \b(add)\b
            -
                name: keyword.other.remove.tomb
                match: \b(remove)\b
            -
                include: '#comment'
            -
                include: '#attribute-section'
            -
                include: '#expression-body'
            -
                include: '#block'
            -
                include: '#punctuation-semicolon'
    method-declaration:
        begin: "(?x)\r\n(?<return-type>\r\n  (?<type-name>\r\n    (?:\r\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\\s+\r\n)\r\n(?<interface-name>\\g<type-name>\\s*\\.\\s*)?\r\n(\\g<identifier>)\\s*\r\n(<([^<>]+)>)?\\s*\r\n(?=\\()"
        beginCaptures:
            '1':
                patterns:
                    - {include: '#type'}
            '7':
                patterns:
                    - {include: '#type'}
                    - {include: '#punctuation-accessor'}
            '8':
                name: entity.name.function.tomb
            '9':
                patterns:
                    - {include: '#type-parameter-list'}
        end: '(?<=\})|(?=;)'
        patterns:
            -
                include: '#comment'
            -
                include: '#parenthesized-parameter-list'
            -
                include: '#generic-constraints'
            -
                include: '#expression-body'
            -
                include: '#block'
    constructor-declaration:
        begin: '(?=@?[_[:alpha:]][_[:alnum:]]*\s*\()'
        end: '(?<=\})|(?=;)'
        patterns:
            -
                match: '(@?[_[:alpha:]][_[:alnum:]]*)\b'
                captures:
                    '1': {name: entity.name.function.tomb}
            -
                begin: '(:)'
                beginCaptures:
                    '1': {name: punctuation.separator.colon.tomb}
                end: '(?=\{|=>)'
                patterns:
                    - {include: '#constructor-initializer'}
            -
                include: '#parenthesized-parameter-list'
            -
                include: '#preprocessor'
            -
                include: '#comment'
            -
                include: '#expression-body'
            -
                include: '#block'
    constructor-initializer:
        begin: '\b(?:(base)|(this))\b\s*(?=\()'
        beginCaptures:
            '1':
                name: keyword.other.base.tomb
            '2':
                name: keyword.other.this.tomb
        end: '(?<=\))'
        patterns:
            -
                include: '#argument-list'
    destructor-declaration:
        begin: '(~)(@?[_[:alpha:]][_[:alnum:]]*)\s*(?=\()'
        beginCaptures:
            '1':
                name: punctuation.tilde.tomb
            '2':
                name: entity.name.function.tomb
        end: '(?<=\})|(?=;)'
        patterns:
            -
                include: '#comment'
            -
                include: '#parenthesized-parameter-list'
            -
                include: '#expression-body'
            -
                include: '#block'
    operator-declaration:
        begin: "(?x)\r\n(?<type-name>\r\n  (?:\r\n    (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(?<operator-keyword>(?:\\b(?:operator)))\\s*\r\n(?<operator>(?:\\+|-|\\*|/|%|&|\\||\\^|\\<\\<|\\>\\>|==|!=|\\>|\\<|\\>=|\\<=|!|~|\\+\\+|--|true|false))\\s*\r\n(?=\\()"
        beginCaptures:
            '1':
                patterns:
                    - {include: '#type'}
            '6':
                name: keyword.other.operator-decl.tomb
            '7':
                name: entity.name.function.tomb
        end: '(?<=\})|(?=;)'
        patterns:
            -
                include: '#comment'
            -
                include: '#parenthesized-parameter-list'
            -
                include: '#expression-body'
            -
                include: '#block'
    conversion-operator-declaration:
        begin: "(?x)\r\n(?<explicit-or-implicit-keyword>(?:\\b(?:explicit|implicit)))\\s*\r\n(?<operator-keyword>(?:\\b(?:operator)))\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:ref\\s+(?:readonly\\s+)?)?   # ref return\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(?=\\()"
        beginCaptures:
            '1':
                patterns:
                    - {match: \b(explicit)\b, captures: {'1': {name: keyword.other.explicit.tomb}}}
                    - {match: \b(implicit)\b, captures: {'1': {name: keyword.other.implicit.tomb}}}
            '2':
                name: keyword.other.operator-decl.tomb
            '3':
                patterns:
                    - {include: '#type'}
        end: '(?<=\})|(?=;)'
        patterns:
            -
                include: '#comment'
            -
                include: '#parenthesized-parameter-list'
            -
                include: '#expression-body'
            -
                include: '#block'
    block:
        begin: '\{'
        beginCaptures:
            '0':
                name: punctuation.curlybrace.open.tomb
        end: '\}'
        endCaptures:
            '0':
                name: punctuation.curlybrace.close.tomb
        patterns:
            -
                include: '#statement'
    variable-initializer:
        begin: '(?<!=|!)(=)(?!=|>)'
        beginCaptures:
            '1':
                name: keyword.operator.assignment.tomb
        end: '(?=[,\)\];}])'
        patterns:
            -
                include: '#ref-modifier'
            -
                include: '#expression'
    expression-body:
        begin: '=>'
        beginCaptures:
            '0':
                name: keyword.operator.arrow.tomb
        end: '(?=[,\);}])'
        patterns:
            -
                include: '#ref-modifier'
            -
                include: '#expression'
    goto-statement:
        begin: '(?<!\.)\b(goto)\b'
        beginCaptures:
            '1':
                name: keyword.control.goto.tomb
        end: '(?=;)'
        patterns:
            -
                begin: \b(case)\b
                beginCaptures:
                    '1': {name: keyword.control.case.tomb}
                end: '(?=;)'
                patterns:
                    - {include: '#expression'}
            -
                match: \b(default)\b
                captures:
                    '1': {name: keyword.control.default.tomb}
            -
                name: entity.name.label.tomb
                match: '@?[_[:alpha:]][_[:alnum:]]*'
    return-statement:
        begin: '(?<!\.)\b(return)\b'
        beginCaptures:
            '1':
                name: keyword.control.flow.return.tomb
        end: '(?=;)'
        patterns:
            -
                include: '#ref-modifier'
            -
                include: '#expression'
    break-or-continue-statement:
        match: '(?<!\.)\b(?:(break)|(continue))\b'
        captures:
            '1':
                name: keyword.control.flow.break.tomb
            '2':
                name: keyword.control.flow.continue.tomb
    throw-statement:
        begin: '(?<!\.)\b(throw)\b'
        beginCaptures:
            '1':
                name: keyword.control.flow.throw.tomb
        end: '(?=;)'
        patterns:
            -
                include: '#expression'
    yield-statement:
        patterns:
            -
                include: '#yield-return-statement'
            -
                include: '#yield-break-statement'
    yield-return-statement:
        begin: '(?<!\.)\b(yield)\b\s*\b(return)\b'
        beginCaptures:
            '1':
                name: keyword.control.flow.yield.tomb
            '2':
                name: keyword.control.flow.return.tomb
        end: '(?=;)'
        patterns:
            -
                include: '#expression'
    yield-break-statement:
        match: '(?<!\.)\b(yield)\b\s*\b(break)\b'
        captures:
            '1':
                name: keyword.control.flow.yield.tomb
            '2':
                name: keyword.control.flow.break.tomb
    await-statement:
        begin: '(?<!\.)\b(await)\b'
        beginCaptures:
            '1':
                name: keyword.other.await.tomb
        end: '(?=;)'
        patterns:
            -
                include: '#expression'
    if-statement:
        begin: '(?<!\.)\b(if)\b\s*(?=\()'
        beginCaptures:
            '1':
                name: keyword.control.conditional.if.tomb
        end: '(?<=\})|(?=;)'
        patterns:
            -
                begin: \(
                beginCaptures:
                    '0': {name: punctuation.parenthesis.open.tomb}
                end: \)
                endCaptures:
                    '0': {name: punctuation.parenthesis.close.tomb}
                patterns:
                    - {include: '#expression'}
            -
                include: '#statement'
    else-part:
        begin: '(?<!\.)\b(else)\b'
        beginCaptures:
            '1':
                name: keyword.control.conditional.else.tomb
        end: '(?<=\})|(?=;)'
        patterns:
            -
                include: '#statement'
    switch-statement:
        begin: '(?<!\.)\b(switch)\b\s*(?=\()'
        beginCaptures:
            '1':
                name: keyword.control.switch.tomb
        end: '(?<=\})'
        patterns:
            -
                begin: \(
                beginCaptures:
                    '0': {name: punctuation.parenthesis.open.tomb}
                end: \)
                endCaptures:
                    '0': {name: punctuation.parenthesis.close.tomb}
                patterns:
                    - {include: '#expression'}
            -
                begin: '\{'
                beginCaptures:
                    '0': {name: punctuation.curlybrace.open.tomb}
                end: '\}'
                endCaptures:
                    '0': {name: punctuation.curlybrace.close.tomb}
                patterns:
                    - {include: '#switch-label'}
                    - {include: '#statement'}
    switch-label:
        patterns:
            -
                begin: '(?<!\.)\b(case)\b\s+'
                beginCaptures:
                    '1': {name: keyword.control.case.tomb}
                end: ':'
                endCaptures:
                    '0': {name: punctuation.separator.colon.tomb}
                patterns:
                    - {include: '#expression'}
            -
                match: '(?<!\.)\b(default)\b\s*(:)'
                captures:
                    '1': {name: keyword.control.default.tomb}
                    '2': {name: punctuation.separator.colon.tomb}
    do-statement:
        begin: '(?<!\.)\b(do)\b'
        beginCaptures:
            '1':
                name: keyword.control.loop.do.tomb
        end: '(?=;|})'
        patterns:
            -
                include: '#statement'
    while-statement:
        begin: '(?<!\.)\b(while)\b\s*(?=\()'
        beginCaptures:
            '1':
                name: keyword.control.loop.while.tomb
        end: '(?<=\})|(?=;)'
        patterns:
            -
                begin: \(
                beginCaptures:
                    '0': {name: punctuation.parenthesis.open.tomb}
                end: \)
                endCaptures:
                    '0': {name: punctuation.parenthesis.close.tomb}
                patterns:
                    - {include: '#expression'}
            -
                include: '#statement'
    for-statement:
        begin: '(?<!\.)\b(for)\b\s*(?=\()'
        beginCaptures:
            '1':
                name: keyword.control.loop.for.tomb
        end: '(?<=\})|(?=;)'
        patterns:
            -
                begin: \(
                beginCaptures:
                    '0': {name: punctuation.parenthesis.open.tomb}
                end: \)
                endCaptures:
                    '0': {name: punctuation.parenthesis.close.tomb}
                patterns:
                    - {include: '#local-variable-declaration'}
                    - {include: '#expression'}
                    - {include: '#punctuation-comma'}
                    - {include: '#punctuation-semicolon'}
            -
                include: '#statement'
    foreach-statement:
        begin: '(?<!\.)\b(foreach)\b\s*(?=\()'
        beginCaptures:
            '1':
                name: keyword.control.loop.foreach.tomb
        end: '(?<=\})|(?=;)'
        patterns:
            -
                begin: \(
                beginCaptures:
                    '0': {name: punctuation.parenthesis.open.tomb}
                end: \)
                endCaptures:
                    '0': {name: punctuation.parenthesis.close.tomb}
                patterns:
                    - {match: "(?x)\r\n(?:\r\n  (\\bvar\\b)|\r\n  (?<type-name>\r\n    (?:\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\s+\r\n\\b(in)\\b", captures: {'1': {name: keyword.other.var.tomb}, '2': {patterns: [{include: '#type'}]}, '7': {name: entity.name.variable.local.tomb}, '8': {name: keyword.control.loop.in.tomb}}}
                    - {match: "(?x) # match foreach (var (x, y) in ...)\r\n(?:\\b(var)\\b\\s*)?\r\n(?<tuple>\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s+\r\n\\b(in)\\b", captures: {'1': {name: keyword.other.var.tomb}, '2': {patterns: [{include: '#tuple-declaration-deconstruction-element-list'}]}, '3': {name: keyword.control.loop.in.tomb}}}
                    - {include: '#expression'}
            -
                include: '#statement'
    try-statement:
        patterns:
            -
                include: '#try-block'
            -
                include: '#catch-clause'
            -
                include: '#finally-clause'
    try-block:
        begin: '(?<!\.)\b(try)\b'
        beginCaptures:
            '1':
                name: keyword.control.try.tomb
        end: '(?<=\})'
        patterns:
            -
                include: '#comment'
            -
                include: '#block'
    finally-clause:
        begin: '(?<!\.)\b(finally)\b'
        beginCaptures:
            '1':
                name: keyword.control.try.finally.tomb
        end: '(?<=\})'
        patterns:
            -
                include: '#comment'
            -
                include: '#block'
    catch-clause:
        begin: '(?<!\.)\b(catch)\b'
        beginCaptures:
            '1':
                name: keyword.control.try.catch.tomb
        end: '(?<=\})'
        patterns:
            -
                begin: \(
                beginCaptures:
                    '0': {name: punctuation.parenthesis.open.tomb}
                end: \)
                endCaptures:
                    '0': {name: punctuation.parenthesis.close.tomb}
                patterns:
                    - {match: "(?x)\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(?:(\\g<identifier>)\\b)?", captures: {'1': {patterns: [{include: '#type'}]}, '6': {name: entity.name.variable.local.tomb}}}
            -
                include: '#when-clause'
            -
                include: '#comment'
            -
                include: '#block'
    when-clause:
        begin: '(?<!\.)\b(when)\b\s*(\()'
        beginCaptures:
            '1':
                name: keyword.control.try.when.tomb
            '2':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#expression'
            -
                include: '#comment'
    checked-unchecked-statement:
        begin: '(?<!\.)\b(?:(checked)|(unchecked))\b\s*(?!\()'
        beginCaptures:
            '1':
                name: keyword.other.checked.tomb
            '2':
                name: keyword.other.unchecked.tomb
        end: '(?<=\})'
        patterns:
            -
                include: '#block'
            -
                include: '#comment'
    lock-statement:
        begin: '(?<!\.)\b(lock)\b\s*(?=\()'
        beginCaptures:
            '1':
                name: keyword.other.lock.tomb
        end: '(?<=\})|(?=;)'
        patterns:
            -
                begin: \(
                beginCaptures:
                    '0': {name: punctuation.parenthesis.open.tomb}
                end: \)
                endCaptures:
                    '0': {name: punctuation.parenthesis.close.tomb}
                patterns:
                    - {include: '#expression'}
            -
                include: '#statement'
    using-statement:
        begin: '(?<!\.)\b(using)\b\s*(?=\()'
        beginCaptures:
            '1':
                name: keyword.other.using.tomb
        end: '(?=\;|})'
        patterns:
            -
                begin: \(
                beginCaptures:
                    '0': {name: punctuation.parenthesis.open.tomb}
                end: \)
                endCaptures:
                    '0': {name: punctuation.parenthesis.close.tomb}
                patterns:
                    - {include: '#local-variable-declaration'}
                    - {include: '#expression'}
            -
                include: '#statement'
    labeled-statement:
        match: '(@?[_[:alpha:]][_[:alnum:]]*)\s*(:)'
        captures:
            '1':
                name: entity.name.label.tomb
            '2':
                name: punctuation.separator.colon.tomb
    local-declaration:
        patterns:
            -
                include: '#local-constant-declaration'
            -
                include: '#local-variable-declaration'
            -
                include: '#local-tuple-var-deconstruction'
    local-variable-declaration:
        begin: "(?x)\r\n(?:\r\n  (?:(\\bref)\\s+(?:(\\breadonly)\\s+)?)?(\\bvar\\b)| # ref local\r\n  (?<type-name>\r\n    (?:\r\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref local\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\s*\r\n(?!=>)\r\n(?=,|;|=|\\))"
        beginCaptures:
            '1':
                name: storage.modifier.tomb
            '2':
                name: storage.modifier.tomb
            '3':
                name: keyword.other.var.tomb
            '4':
                patterns:
                    - {include: '#type'}
            '9':
                name: entity.name.variable.local.tomb
        end: '(?=;|\))'
        patterns:
            -
                name: entity.name.variable.local.tomb
                match: '@?[_[:alpha:]][_[:alnum:]]*'
            -
                include: '#punctuation-comma'
            -
                include: '#comment'
            -
                include: '#variable-initializer'
    local-constant-declaration:
        begin: "(?x)\r\n(?<const-keyword>\\b(?:const)\\b)\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\s*\r\n(?=,|;|=)"
        beginCaptures:
            '1':
                name: storage.modifier.tomb
            '2':
                patterns:
                    - {include: '#type'}
            '7':
                name: entity.name.variable.local.tomb
        end: '(?=;)'
        patterns:
            -
                name: entity.name.variable.local.tomb
                match: '@?[_[:alpha:]][_[:alnum:]]*'
            -
                include: '#punctuation-comma'
            -
                include: '#comment'
            -
                include: '#variable-initializer'
    local-tuple-var-deconstruction:
        begin: "(?x) # e.g. var (x, y) = GetPoint();\r\n(?:\\b(var)\\b\\s*)\r\n(?<tuple>\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s*\r\n(?=;|=|\\))"
        beginCaptures:
            '1':
                name: keyword.other.var.tomb
            '2':
                patterns:
                    - {include: '#tuple-declaration-deconstruction-element-list'}
        end: '(?=;|\))'
        patterns:
            -
                include: '#comment'
            -
                include: '#variable-initializer'
    tuple-deconstruction-assignment:
        match: "(?x)\r\n(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s*\r\n(?!=>|==)(?==)"
        captures:
            '1':
                patterns:
                    - {include: '#tuple-deconstruction-element-list'}
    tuple-declaration-deconstruction-element-list:
        begin: \(
        beginCaptures:
            '0':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#comment'
            -
                include: '#tuple-declaration-deconstruction-element-list'
            -
                include: '#declaration-expression-tuple'
            -
                include: '#punctuation-comma'
            -
                match: "(?x) # e.g. x\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\r\n(?=[,)])"
                captures:
                    '1': {name: entity.name.variable.tuple-element.tomb}
    tuple-deconstruction-element-list:
        begin: \(
        beginCaptures:
            '0':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#comment'
            -
                include: '#tuple-deconstruction-element-list'
            -
                include: '#declaration-expression-tuple'
            -
                include: '#punctuation-comma'
            -
                match: "(?x) # e.g. x\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\r\n(?=[,)])"
                captures:
                    '1': {name: variable.other.readwrite.tomb}
    declaration-expression-local:
        match: "(?x) # e.g. int x OR var x\r\n(?:\r\n  \\b(var)\\b|\r\n  (?<type-name>\r\n    (?:\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\b\\s*\r\n(?=[,)\\]])"
        captures:
            '1':
                name: keyword.other.var.tomb
            '2':
                patterns:
                    - {include: '#type'}
            '7':
                name: entity.name.variable.local.tomb
    declaration-expression-tuple:
        match: "(?x) # e.g. int x OR var x\r\n(?:\r\n  \\b(var)\\b|\r\n  (?<type-name>\r\n    (?:\r\n      (?:\r\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n        (?<name-and-type-args> # identifier + type arguments (if any)\r\n          \\g<identifier>\\s*\r\n          (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n        )\r\n        (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n      )\r\n      (?:\\s*\\?\\s*)? # nullable suffix?\r\n      (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n    )\r\n  )\r\n)\\s+\r\n(\\g<identifier>)\\b\\s*\r\n(?=[,)])"
        captures:
            '1':
                name: keyword.other.var.tomb
            '2':
                patterns:
                    - {include: '#type'}
            '7':
                name: entity.name.variable.tuple-element.tomb
    checked-unchecked-expression:
        begin: '(?<!\.)\b(?:(checked)|(unchecked))\b\s*(\()'
        beginCaptures:
            '1':
                name: keyword.other.checked.tomb
            '2':
                name: keyword.other.unchecked.tomb
            '3':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#expression'
    typeof-or-default-expression:
        begin: '(?<!\.)\b(?:(typeof)|(default))\b\s*(\()'
        beginCaptures:
            '1':
                name: keyword.other.typeof.tomb
            '2':
                name: keyword.other.default.tomb
            '3':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#type'
    nameof-expression:
        begin: '(?<!\.)\b(nameof)\b\s*(\()'
        beginCaptures:
            '1':
                name: keyword.other.nameof.tomb
            '2':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#expression'
    throw-expression:
        match: '(?<!\.)\b(throw)\b'
        captures:
            '1':
                name: keyword.control.flow.throw.tomb
    interpolated-string:
        name: string.quoted.double.tomb
        begin: '\$"'
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.tomb
        end: '(")|((?:[^\\\n])$)'
        endCaptures:
            '1':
                name: punctuation.definition.string.end.tomb
            '2':
                name: invalid.illegal.newline.tomb
        patterns:
            -
                include: '#string-character-escape'
            -
                include: '#interpolation'
    verbatim-interpolated-string:
        name: string.quoted.double.tomb
        begin: '\$@"'
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.tomb
        end: '"(?=[^"])'
        endCaptures:
            '0':
                name: punctuation.definition.string.end.tomb
        patterns:
            -
                include: '#verbatim-string-character-escape'
            -
                include: '#interpolation'
    interpolation:
        name: meta.interpolation.tomb
        begin: '(?<=[^\{]|^)((?:\{\{)*)(\{)(?=[^\{])'
        beginCaptures:
            '1':
                name: string.quoted.double.tomb
            '2':
                name: punctuation.definition.interpolation.begin.tomb
        end: '\}'
        endCaptures:
            '0':
                name: punctuation.definition.interpolation.end.tomb
        patterns:
            -
                include: '#expression'
    literal:
        patterns:
            -
                include: '#boolean-literal'
            -
                include: '#null-literal'
            -
                include: '#numeric-literal'
            -
                include: '#char-literal'
            -
                include: '#string-literal'
            -
                include: '#verbatim-string-literal'
            -
                include: '#tuple-literal'
    boolean-literal:
        patterns:
            -
                name: constant.language.boolean.true.tomb
                match: '(?<!\.)\btrue\b'
            -
                name: constant.language.boolean.false.tomb
                match: '(?<!\.)\bfalse\b'
    null-literal:
        name: constant.language.null.tomb
        match: '(?<!\.)\bnull\b'
    numeric-literal:
        patterns:
            -
                name: constant.numeric.hex.tomb
                match: '\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
            -
                name: constant.numeric.binary.tomb
                match: '\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
            -
                name: constant.numeric.decimal.tomb
                match: '\b([0-9_]+)?\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\b'
            -
                name: constant.numeric.decimal.tomb
                match: '\b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\b'
            -
                name: constant.numeric.decimal.tomb
                match: '\b[0-9_]+(F|f|D|d|M|m)\b'
            -
                name: constant.numeric.decimal.tomb
                match: '\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
    char-literal:
        name: string.quoted.single.tomb
        begin: ''''
        beginCaptures:
            '0':
                name: punctuation.definition.char.begin.tomb
        end: '(\'')|((?:[^\\\n])$)'
        endCaptures:
            '1':
                name: punctuation.definition.char.end.tomb
            '2':
                name: invalid.illegal.newline.tomb
        patterns:
            -
                include: '#char-character-escape'
    char-character-escape:
        name: constant.character.escape.tomb
        match: '\\([''"\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})'
    string-literal:
        name: string.quoted.double.tomb
        begin: '(?<!@)"'
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.tomb
        end: '(")|((?:[^\\\n])$)'
        endCaptures:
            '1':
                name: punctuation.definition.string.end.tomb
            '2':
                name: invalid.illegal.newline.tomb
        patterns:
            -
                include: '#string-character-escape'
    string-character-escape:
        name: constant.character.escape.tomb
        match: '\\([''"\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})'
    verbatim-string-literal:
        name: string.quoted.double.tomb
        begin: '@"'
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.tomb
        end: '"(?=[^"])'
        endCaptures:
            '0':
                name: punctuation.definition.string.end.tomb
        patterns:
            -
                include: '#verbatim-string-character-escape'
    verbatim-string-character-escape:
        name: constant.character.escape.tomb
        match: '""'
    tuple-literal:
        begin: '(\()(?=.*[:,])'
        beginCaptures:
            '1':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#comment'
            -
                include: '#tuple-literal-element'
            -
                include: '#punctuation-comma'
    tuple-literal-element:
        begin: "(?x)\r\n(?:(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)\\s*)?\r\n(?![,)])"
        beginCaptures:
            '0':
                name: entity.name.variable.tuple-element.tomb
            '1':
                name: punctuation.separator.colon.tomb
        end: '(?=[,)])'
        patterns:
            -
                include: '#expression'
    expression-operators:
        patterns:
            -
                name: keyword.operator.assignment.compound.tomb
                match: '\*=|/=|%=|\+=|-='
            -
                name: keyword.operator.assignment.compound.bitwise.tomb
                match: '\&=|\^=|<<=|>>=|\|='
            -
                name: keyword.operator.bitwise.shift.tomb
                match: '<<|>>'
            -
                name: keyword.operator.comparison.tomb
                match: '==|!='
            -
                name: keyword.operator.relational.tomb
                match: '<=|>=|<|>'
            -
                name: keyword.operator.logical.tomb
                match: '\!|&&|\|\|'
            -
                name: keyword.operator.bitwise.tomb
                match: '\&|~|\^|\|'
            -
                name: keyword.operator.assignment.tomb
                match: \=
            -
                name: keyword.operator.decrement.tomb
                match: '--'
            -
                name: keyword.operator.increment.tomb
                match: \+\+
            -
                name: keyword.operator.arithmetic.tomb
                match: '%|\*|/|-|\+'
            -
                name: keyword.operator.null-coalescing.tomb
                match: '\?\?'
    conditional-operator:
        begin: '(?<!\?)\?(?!\?|\.|\[)'
        beginCaptures:
            '0':
                name: keyword.operator.conditional.question-mark.tomb
        end: ':'
        endCaptures:
            '0':
                name: keyword.operator.conditional.colon.tomb
        patterns:
            -
                include: '#expression'
    await-expression:
        name: keyword.other.await.tomb
        match: '(?!\.)\b(await)\b'
    parenthesized-expression:
        begin: \(
        beginCaptures:
            '0':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#expression'
    initializer-expression:
        begin: '\{'
        beginCaptures:
            '0':
                name: punctuation.curlybrace.open.tomb
        end: '\}'
        endCaptures:
            '0':
                name: punctuation.curlybrace.close.tomb
        patterns:
            -
                include: '#expression'
            -
                include: '#punctuation-comma'
    identifier:
        name: variable.other.readwrite.tomb
        match: '@?[_[:alpha:]][_[:alnum:]]*'
    cast-expression:
        match: "(?x)\r\n(\\()\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(\\))(?=\\s*@?[_[:alnum:]\\(])"
        captures:
            '1':
                name: punctuation.parenthesis.open.tomb
            '2':
                patterns:
                    - {include: '#type'}
            '7':
                name: punctuation.parenthesis.close.tomb
    as-expression:
        match: "(?x)\r\n(?<!\\.)\\b(as)\\b\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)?"
        captures:
            '1':
                name: keyword.other.as.tomb
            '2':
                patterns:
                    - {include: '#type'}
    is-expression:
        match: "(?x)\r\n(?<!\\.)\\b(is)\\b\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)?"
        captures:
            '1':
                name: keyword.other.is.tomb
            '2':
                patterns:
                    - {include: '#type'}
    this-or-base-expression:
        match: '\b(?:(base)|(this))\b'
        captures:
            '1':
                name: keyword.other.base.tomb
            '2':
                name: keyword.other.this.tomb
    invocation-expression:
        begin: "(?x)\r\n(?:(\\?)\\s*)?                                     # preceding null-conditional operator?\r\n(?:(\\.)\\s*)?                                     # preceding dot?\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*                   # method name\r\n(?<type-args>\\s*<([^<>]|\\g<type-args>)+>\\s*)?\\s* # type arguments\r\n(?=\\()                                           # open paren of argument list"
        beginCaptures:
            '1':
                name: keyword.operator.null-conditional.tomb
            '2':
                name: punctuation.accessor.tomb
            '3':
                name: entity.name.function.tomb
            '4':
                patterns:
                    - {include: '#type-arguments'}
        end: '(?<=\))'
        patterns:
            -
                include: '#argument-list'
    element-access-expression:
        begin: "(?x)\r\n(?:(\\?)\\s*)?                        # preceding null-conditional operator?\r\n(?:(\\.)\\s*)?                        # preceding dot?\r\n(?:(@?[_[:alpha:]][_[:alnum:]]*)\\s*)? # property name\r\n(?:(\\?)\\s*)?                        # null-conditional operator?\r\n(?=\\[)                              # open bracket of argument list"
        beginCaptures:
            '1':
                name: keyword.operator.null-conditional.tomb
            '2':
                name: punctuation.accessor.tomb
            '3':
                name: variable.other.object.property.tomb
            '4':
                name: keyword.operator.null-conditional.tomb
        end: '(?<=\])(?!\s*\[)'
        patterns:
            -
                include: '#bracketed-argument-list'
    member-access-expression:
        patterns:
            -
                match: "(?x)\r\n(?:(\\?)\\s*)?                   # preceding null-conditional operator?\r\n(\\.)\\s*                        # preceding dot\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\s* # property name\r\n(?![_[:alnum:]]|\\(|(\\?)?\\[|<)  # next character is not alpha-numeric, nor a (, [, or <. Also, test for ?["
                captures:
                    '1': {name: keyword.operator.null-conditional.tomb}
                    '2': {name: punctuation.accessor.tomb}
                    '3': {name: variable.other.object.property.tomb}
            -
                match: "(?x)\r\n(\\.)?\\s*\r\n(@?[_[:alpha:]][_[:alnum:]]*)\r\n(?<type-params>\\s*<([^<>]|\\g<type-params>)+>\\s*)\r\n(?=\r\n  (\\s*\\?)?\r\n  \\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*\r\n)"
                captures:
                    '1': {name: punctuation.accessor.tomb}
                    '2': {name: variable.other.object.tomb}
                    '3': {patterns: [{include: '#type-arguments'}]}
            -
                match: "(?x)\r\n(@?[_[:alpha:]][_[:alnum:]]*)\r\n(?=\r\n  (\\s*\\?)?\r\n  \\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*\r\n)"
                captures:
                    '1': {name: variable.other.object.tomb}
    object-creation-expression:
        patterns:
            -
                include: '#object-creation-expression-with-parameters'
            -
                include: '#object-creation-expression-with-no-parameters'
    object-creation-expression-with-parameters:
        begin: "(?x)\r\n(new)\\s+\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(?=\\()"
        beginCaptures:
            '1':
                name: keyword.other.new.tomb
            '2':
                patterns:
                    - {include: '#type'}
        end: '(?<=\))'
        patterns:
            -
                include: '#argument-list'
    object-creation-expression-with-no-parameters:
        match: "(?x)\r\n(new)\\s+\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s*\r\n(?=\\{|$)"
        captures:
            '1':
                name: keyword.other.new.tomb
            '2':
                patterns:
                    - {include: '#type'}
    array-creation-expression:
        begin: "(?x)\r\n\\b(new|stackalloc)\\b\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)?\\s*\r\n(?=\\[)"
        beginCaptures:
            '1':
                name: keyword.other.new.tomb
            '2':
                patterns:
                    - {include: '#type'}
        end: '(?<=\])'
        patterns:
            -
                include: '#bracketed-argument-list'
    anonymous-object-creation-expression:
        begin: '\b(new)\b\s*(?=\{|$)'
        beginCaptures:
            '1':
                name: keyword.other.new.tomb
        end: '(?<=\})'
        patterns:
            -
                include: '#initializer-expression'
    bracketed-parameter-list:
        begin: '(?=(\[))'
        beginCaptures:
            '1':
                name: punctuation.squarebracket.open.tomb
        end: '(?=(\]))'
        endCaptures:
            '1':
                name: punctuation.squarebracket.close.tomb
        patterns:
            -
                begin: '(?<=\[)'
                end: '(?=\])'
                patterns:
                    - {include: '#comment'}
                    - {include: '#attribute-section'}
                    - {include: '#parameter'}
                    - {include: '#punctuation-comma'}
                    - {include: '#variable-initializer'}
    parenthesized-parameter-list:
        begin: (\()
        beginCaptures:
            '0':
                name: punctuation.parenthesis.open.tomb
        end: (\))
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#comment'
            -
                include: '#attribute-section'
            -
                include: '#parameter'
            -
                include: '#punctuation-comma'
            -
                include: '#variable-initializer'
    parameter:
        match: "(?x)\r\n(?:(?:\\b(ref|params|out|in|this)\\b)\\s+)?\r\n(?<type-name>\r\n  (?:\r\n    (?:ref\\s+)?   # ref return\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s+\r\n(\\g<identifier>)"
        captures:
            '1':
                name: storage.modifier.tomb
            '2':
                patterns:
                    - {include: '#type'}
            '7':
                name: entity.name.variable.parameter.tomb
    argument-list:
        begin: \(
        beginCaptures:
            '0':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#named-argument'
            -
                include: '#argument'
            -
                include: '#punctuation-comma'
    bracketed-argument-list:
        begin: '\['
        beginCaptures:
            '0':
                name: punctuation.squarebracket.open.tomb
        end: '\]'
        endCaptures:
            '0':
                name: punctuation.squarebracket.close.tomb
        patterns:
            -
                include: '#named-argument'
            -
                include: '#argument'
            -
                include: '#punctuation-comma'
    named-argument:
        begin: '(@?[_[:alpha:]][_[:alnum:]]*)\s*(:)'
        beginCaptures:
            '1':
                name: entity.name.variable.parameter.tomb
            '2':
                name: punctuation.separator.colon.tomb
        end: '(?=(,|\)|\]))'
        patterns:
            -
                include: '#argument'
    argument:
        patterns:
            -
                name: storage.modifier.tomb
                match: \b(ref|out|in)\b
            -
                include: '#declaration-expression-local'
            -
                include: '#expression'
    query-expression:
        begin: "(?x)\r\n\\b(from)\\b\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)?\r\n\\s+(\\g<identifier>)\\b\\s*\r\n\\b(in)\\b\\s*"
        beginCaptures:
            '1':
                name: keyword.query.from.tomb
            '2':
                patterns:
                    - {include: '#type'}
            '7':
                name: entity.name.variable.range-variable.tomb
            '8':
                name: keyword.query.in.tomb
        end: '(?=;|\))'
        patterns:
            -
                include: '#query-body'
            -
                include: '#expression'
    query-body:
        patterns:
            -
                include: '#let-clause'
            -
                include: '#where-clause'
            -
                include: '#join-clause'
            -
                include: '#orderby-clause'
            -
                include: '#select-clause'
            -
                include: '#group-clause'
    let-clause:
        begin: "(?x)\r\n\\b(let)\\b\\s*\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\r\n(=)\\s*"
        beginCaptures:
            '1':
                name: keyword.query.let.tomb
            '2':
                name: entity.name.variable.range-variable.tomb
            '3':
                name: keyword.operator.assignment.tomb
        end: '(?=;|\))'
        patterns:
            -
                include: '#query-body'
            -
                include: '#expression'
    where-clause:
        begin: "(?x)\r\n\\b(where)\\b\\s*"
        beginCaptures:
            '1':
                name: keyword.query.where.tomb
        end: '(?=;|\))'
        patterns:
            -
                include: '#query-body'
            -
                include: '#expression'
    join-clause:
        begin: "(?x)\r\n\\b(join)\\b\\s*\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)?\r\n\\s+(\\g<identifier>)\\b\\s*\r\n\\b(in)\\b\\s*"
        beginCaptures:
            '1':
                name: keyword.query.join.tomb
            '2':
                patterns:
                    - {include: '#type'}
            '7':
                name: entity.name.variable.range-variable.tomb
            '8':
                name: keyword.query.in.tomb
        end: '(?=;|\))'
        patterns:
            -
                include: '#join-on'
            -
                include: '#join-equals'
            -
                include: '#join-into'
            -
                include: '#query-body'
            -
                include: '#expression'
    join-on:
        match: '\b(on)\b\s*'
        captures:
            '1':
                name: keyword.query.on.tomb
    join-equals:
        match: '\b(equals)\b\s*'
        captures:
            '1':
                name: keyword.query.equals.tomb
    join-into:
        match: "(?x)\r\n\\b(into)\\b\\s*\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*"
        captures:
            '1':
                name: keyword.query.into.tomb
            '2':
                name: entity.name.variable.range-variable.tomb
    orderby-clause:
        begin: '\b(orderby)\b\s*'
        beginCaptures:
            '1':
                name: keyword.query.orderby.tomb
        end: '(?=;|\))'
        patterns:
            -
                include: '#ordering-direction'
            -
                include: '#query-body'
            -
                include: '#expression'
            -
                include: '#punctuation-comma'
    ordering-direction:
        match: '\b(?:(ascending)|(descending))\b'
        captures:
            '1':
                name: keyword.query.ascending.tomb
            '2':
                name: keyword.query.descending.tomb
    select-clause:
        begin: '\b(select)\b\s*'
        beginCaptures:
            '1':
                name: keyword.query.select.tomb
        end: '(?=;|\))'
        patterns:
            -
                include: '#query-body'
            -
                include: '#expression'
    group-clause:
        begin: '\b(group)\b\s*'
        beginCaptures:
            '1':
                name: keyword.query.group.tomb
        end: '(?=;|\))'
        patterns:
            -
                include: '#group-by'
            -
                include: '#group-into'
            -
                include: '#query-body'
            -
                include: '#expression'
    group-by:
        match: '\b(by)\b\s*'
        captures:
            '1':
                name: keyword.query.by.tomb
    group-into:
        match: "(?x)\r\n\\b(into)\\b\\s*\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*"
        captures:
            '1':
                name: keyword.query.into.tomb
            '2':
                name: entity.name.variable.range-variable.tomb
    anonymous-method-expression:
        patterns:
            -
                begin: "(?x)\r\n(?:\\b(async)\\b\\s*)?\r\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\r\n(=>)"
                beginCaptures:
                    '1': {name: storage.modifier.tomb}
                    '2': {name: entity.name.variable.parameter.tomb}
                    '3': {name: keyword.operator.arrow.tomb}
                end: '(?=\)|;|}|,)'
                patterns:
                    - {include: '#block'}
                    - {include: '#ref-modifier'}
                    - {include: '#expression'}
            -
                begin: "(?x)\r\n(?:\\b(async)\\b\\s*)?\r\n(\\(.*?\\))\\s*\r\n(=>)"
                beginCaptures:
                    '1': {name: storage.modifier.tomb}
                    '2': {patterns: [{include: '#lambda-parameter-list'}]}
                    '3': {name: keyword.operator.arrow.tomb}
                end: '(?=\)|;|}|,)'
                patterns:
                    - {include: '#block'}
                    - {include: '#ref-modifier'}
                    - {include: '#expression'}
            -
                begin: "(?x)\r\n(?:\\b(async)\\b\\s*)?\r\n(?:\\b(delegate)\\b\\s*)"
                beginCaptures:
                    '1': {name: storage.modifier.tomb}
                    '2': {name: keyword.other.delegate.tomb}
                end: '(?=\)|;|}|,)'
                patterns:
                    - {include: '#parenthesized-parameter-list'}
                    - {include: '#block'}
                    - {include: '#expression'}
    lambda-parameter-list:
        begin: \(
        beginCaptures:
            '0':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#comment'
            -
                include: '#attribute-section'
            -
                include: '#lambda-parameter'
            -
                include: '#punctuation-comma'
    lambda-parameter:
        match: "(?x)\r\n(?:\\b(ref|out|in)\\b)?\\s*\r\n(?:(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\\s+)?\r\n(\\g<identifier>)\\b\\s*\r\n(?=[,)])"
        captures:
            '1':
                name: storage.modifier.tomb
            '2':
                patterns:
                    - {include: '#type'}
            '7':
                name: entity.name.variable.parameter.tomb
    type:
        name: meta.type.tomb
        patterns:
            -
                include: '#comment'
            -
                include: '#ref-modifier'
            -
                include: '#readonly-modifier'
            -
                include: '#tuple-type'
            -
                include: '#type-builtin'
            -
                include: '#type-name'
            -
                include: '#type-arguments'
            -
                include: '#type-array-suffix'
            -
                include: '#type-nullable-suffix'
    ref-modifier:
        name: storage.modifier.tomb
        match: \b(ref)\b
    readonly-modifier:
        name: storage.modifier.tomb
        match: \b(readonly)\b
    tuple-type:
        begin: \(
        beginCaptures:
            '0':
                name: punctuation.parenthesis.open.tomb
        end: \)
        endCaptures:
            '0':
                name: punctuation.parenthesis.close.tomb
        patterns:
            -
                include: '#tuple-element'
            -
                include: '#punctuation-comma'
    tuple-element:
        match: "(?x)\r\n(?<type-name>\r\n  (?:\r\n    (?:\r\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\r\n      (?<name-and-type-args> # identifier + type arguments (if any)\r\n        \\g<identifier>\\s*\r\n        (?<type-args>\\s*<(?:[^<>]|\\g<type-args>)+>\\s*)?\r\n      )\r\n      (?:\\s*\\.\\s*\\g<name-and-type-args>)* | # Are there any more names being dotted into?\r\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\r\n    )\r\n    (?:\\s*\\?\\s*)? # nullable suffix?\r\n    (?:\\s*\\[(?:\\s*,\\s*)*\\]\\s*)* # array suffix?\r\n  )\r\n)\r\n(?:(?<tuple-name>\\g<identifier>)\\b)?"
        captures:
            '1':
                patterns:
                    - {include: '#type'}
            '6':
                name: entity.name.variable.tuple-element.tomb
    type-builtin:
        match: \b(bool|byte|char|decimal|double|float|int|long|object|sbyte|short|string|uint|ulong|ushort|void|dynamic)\b
        captures:
            '1':
                name: keyword.type.tomb
    type-name:
        patterns:
            -
                match: '(@?[_[:alpha:]][_[:alnum:]]*)\s*(\:\:)'
                captures:
                    '1': {name: entity.name.type.alias.tomb}
                    '2': {name: punctuation.separator.coloncolon.tomb}
            -
                match: '(@?[_[:alpha:]][_[:alnum:]]*)\s*(\.)'
                captures:
                    '1': {name: storage.type.tomb}
                    '2': {name: punctuation.accessor.tomb}
            -
                match: '(\.)\s*(@?[_[:alpha:]][_[:alnum:]]*)'
                captures:
                    '1': {name: punctuation.accessor.tomb}
                    '2': {name: storage.type.tomb}
            -
                name: storage.type.tomb
                match: '@?[_[:alpha:]][_[:alnum:]]*'
    type-arguments:
        begin: '<'
        beginCaptures:
            '0':
                name: punctuation.definition.typeparameters.begin.tomb
        end: '>'
        endCaptures:
            '0':
                name: punctuation.definition.typeparameters.end.tomb
        patterns:
            -
                include: '#comment'
            -
                include: '#type'
            -
                include: '#punctuation-comma'
    type-array-suffix:
        begin: '\['
        beginCaptures:
            '0':
                name: punctuation.squarebracket.open.tomb
        end: '\]'
        endCaptures:
            '0':
                name: punctuation.squarebracket.close.tomb
        patterns:
            -
                include: '#punctuation-comma'
    type-nullable-suffix:
        match: '\?'
        captures:
            '0':
                name: punctuation.separator.question-mark.tomb
    operator-assignment:
        name: keyword.operator.assignment.tomb
        match: '(?<!=|!)(=)(?!=)'
    punctuation-comma:
        name: punctuation.separator.comma.tomb
        match: ','
    punctuation-colon:
        name: punctuation.seperator.colon.tomb
        match: ':'
    punctuation-semicolon:
        name: punctuation.terminator.statement.tomb
        match: ;
    punctuation-accessor:
        name: punctuation.accessor.tomb
        match: \.
    preprocessor:
        name: meta.preprocessor.tomb
        begin: '^\s*(\#)\s*'
        beginCaptures:
            '1':
                name: punctuation.separator.hash.tomb
        end: '(?<=$)'
        patterns:
            -
                include: '#comment'
            -
                include: '#preprocessor-define-or-undef'
            -
                include: '#preprocessor-if-or-elif'
            -
                include: '#preprocessor-else-or-endif'
            -
                include: '#preprocessor-warning-or-error'
            -
                include: '#preprocessor-region'
            -
                include: '#preprocessor-endregion'
            -
                include: '#preprocessor-load'
            -
                include: '#preprocessor-r'
            -
                include: '#preprocessor-line'
            -
                include: '#preprocessor-pragma-warning'
            -
                include: '#preprocessor-pragma-checksum'
    preprocessor-define-or-undef:
        match: '\b(?:(define)|(undef))\b\s*\b([_[:alpha:]][_[:alnum:]]*)\b'
        captures:
            '1':
                name: keyword.preprocessor.define.tomb
            '2':
                name: keyword.preprocessor.undef.tomb
            '3':
                name: entity.name.variable.preprocessor.symbol.tomb
    preprocessor-if-or-elif:
        begin: '\b(?:(if)|(elif))\b'
        beginCaptures:
            '1':
                name: keyword.preprocessor.if.tomb
            '2':
                name: keyword.preprocessor.elif.tomb
        end: '(?=$)'
        patterns:
            -
                include: '#comment'
            -
                include: '#preprocessor-expression'
    preprocessor-else-or-endif:
        match: '\b(?:(else)|(endif))\b'
        captures:
            '1':
                name: keyword.preprocessor.else.tomb
            '2':
                name: keyword.preprocessor.endif.tomb
    preprocessor-warning-or-error:
        match: '\b(?:(warning)|(error))\b\s*(.*)(?=$)'
        captures:
            '1':
                name: keyword.preprocessor.warning.tomb
            '2':
                name: keyword.preprocessor.error.tomb
            '3':
                name: string.unquoted.preprocessor.message.tomb
    preprocessor-load:
        begin: \b(load)\b
        beginCaptures:
            '1':
                name: keyword.preprocessor.load.tomb
        end: '(?=$)'
        patterns:
            -
                match: '\"[^"]*\"'
                captures:
                    '0': {name: string.quoted.double.tomb}
    preprocessor-r:
        begin: \b(r)\b
        beginCaptures:
            '1':
                name: keyword.preprocessor.r.tomb
        end: '(?=$)'
        patterns:
            -
                match: '\"[^"]*\"'
                captures:
                    '0': {name: string.quoted.double.tomb}
    preprocessor-region:
        match: '\b(region)\b\s*(.*)(?=$)'
        captures:
            '1':
                name: keyword.preprocessor.region.tomb
            '2':
                name: string.unquoted.preprocessor.message.tomb
    preprocessor-endregion:
        match: \b(endregion)\b
        captures:
            '1':
                name: keyword.preprocessor.endregion.tomb
    preprocessor-line:
        begin: \b(line)\b
        beginCaptures:
            '1':
                name: keyword.preprocessor.line.tomb
        end: '(?=$)'
        patterns:
            -
                match: '\b(?:(default|hidden))'
                captures:
                    '1': {name: keyword.preprocessor.default.tomb}
                    '2': {name: keyword.preprocessor.hidden.tomb}
            -
                match: '[0-9]+'
                captures:
                    '0': {name: constant.numeric.decimal.tomb}
            -
                match: '\"[^"]*\"'
                captures:
                    '0': {name: string.quoted.double.tomb}
    preprocessor-pragma-warning:
        match: '\b(pragma)\b\s*\b(warning)\b\s*\b(?:(disable)|(restore))\b(\s*[0-9]+(?:\s*,\s*[0-9]+)?)?'
        captures:
            '1':
                name: keyword.preprocessor.pragma.tomb
            '2':
                name: keyword.preprocessor.warning.tomb
            '3':
                name: keyword.preprocessor.disable.tomb
            '4':
                name: keyword.preprocessor.restore.tomb
            '5':
                patterns:
                    - {match: '[0-9]+', captures: {'0': {name: constant.numeric.decimal.tomb}}}
                    - {include: '#punctuation-comma'}
    preprocessor-pragma-checksum:
        match: '\b(pragma)\b\s*\b(checksum)\b\s*(\"[^"]*\")\s*(\"[^"]*\")\s*(\"[^"]*\")'
        captures:
            '1':
                name: keyword.preprocessor.pragma.tomb
            '2':
                name: keyword.preprocessor.checksum.tomb
            '3':
                name: string.quoted.double.tomb
            '4':
                name: string.quoted.double.tomb
            '5':
                name: string.quoted.double.tomb
    preprocessor-expression:
        patterns:
            -
                begin: \(
                beginCaptures:
                    '0': {name: punctuation.parenthesis.open.tomb}
                end: \)
                endCaptures:
                    '0': {name: punctuation.parenthesis.close.tomb}
                patterns:
                    - {include: '#preprocessor-expression'}
            -
                match: '\b(?:(true)|(false)|([_[:alpha:]][_[:alnum:]]*))\b'
                captures:
                    '1': {name: constant.language.boolean.true.tomb}
                    '2': {name: constant.language.boolean.false.tomb}
                    '3': {name: entity.name.variable.preprocessor.symbol.tomb}
            -
                match: '(==|!=)|(\!|&&|\|\|)'
                captures:
                    '1': {name: keyword.operator.comparison.tomb}
                    '2': {name: keyword.operator.logical.tomb}
    comment:
        patterns:
            -
                name: comment.block.tomb
                begin: '/\*'
                beginCaptures:
                    '0': {name: punctuation.definition.comment.tomb}
                end: '\*/'
                endCaptures:
                    '0': {name: punctuation.definition.comment.tomb}
            -
                begin: '(^\s+)?(?=//)'
                beginCaptures:
                    '1': {name: punctuation.whitespace.comment.leading.tomb}
                end: '(?=$)'
                patterns:
                    - {name: comment.block.documentation.tomb, begin: '(?<!/)///(?!/)', beginCaptures: {'0': {name: punctuation.definition.comment.tomb}}, end: '(?=$)', patterns: [{include: '#xml-doc-comment'}]}
                    - {name: comment.line.double-slash.tomb, begin: '(?<!/)//(?:(?!/)|(?=//))', beginCaptures: {'0': {name: punctuation.definition.comment.tomb}}, end: '(?=$)'}
    xml-doc-comment:
        patterns:
            -
                include: '#xml-comment'
            -
                include: '#xml-character-entity'
            -
                include: '#xml-cdata'
            -
                include: '#xml-tag'
    xml-tag:
        name: meta.tag.tomb
        begin: "(?x)\r\n(</?)\r\n(\r\n  (?:\r\n    ([-_[:alnum:]]+)\r\n    (:)\r\n  )?\r\n  ([-_[:alnum:]]+)\r\n)"
        beginCaptures:
            '1':
                name: punctuation.definition.tag.tomb
            '2':
                name: entity.name.tag.tomb
            '3':
                name: entity.name.tag.namespace.tomb
            '4':
                name: punctuation.separator.colon.tomb
            '5':
                name: entity.name.tag.localname.tomb
        end: '(/?>)'
        endCaptures:
            '1':
                name: punctuation.definition.tag.tomb
        patterns:
            -
                include: '#xml-attribute'
    xml-attribute:
        patterns:
            -
                match: "(?x)\r\n(?:^|\\s+)\r\n(\r\n  (?:\r\n    ([-_[:alnum:]]+)\r\n    (:)\r\n  )?\r\n  ([-_[:alnum:]]+)\r\n)\r\n(=)"
                captures:
                    '1': {name: entity.other.attribute-name.tomb}
                    '2': {name: entity.other.attribute-name.namespace.tomb}
                    '3': {name: punctuation.separator.colon.tomb}
                    '4': {name: entity.other.attribute-name.localname.tomb}
                    '5': {name: punctuation.separator.equals.tomb}
            -
                include: '#xml-string'
    xml-cdata:
        name: string.unquoted.cdata.tomb
        begin: '<!\[CDATA\['
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.tomb
        end: '\]\]>'
        endCaptures:
            '0':
                name: punctuation.definition.string.end.tomb
    xml-string:
        patterns:
            -
                name: string.quoted.single.tomb
                begin: '\'''
                beginCaptures:
                    '0': {name: punctuation.definition.string.begin.tomb}
                end: '\'''
                endCaptures:
                    '0': {name: punctuation.definition.string.end.tomb}
                patterns:
                    - {include: '#xml-character-entity'}
            -
                name: string.quoted.double.tomb
                begin: '\"'
                beginCaptures:
                    '0': {name: punctuation.definition.string.begin.tomb}
                end: '\"'
                endCaptures:
                    '0': {name: punctuation.definition.string.end.tomb}
                patterns:
                    - {include: '#xml-character-entity'}
    xml-character-entity:
        patterns:
            -
                name: constant.character.entity.tomb
                match: "(?x)\r\n(&)\r\n(\r\n  (?:[[:alpha:]:_][[:alnum:]:_.-]*)|\r\n  (?:\\#[[:digit:]]+)|\r\n  (?:\\#x[[:xdigit:]]+)\r\n)\r\n(;)"
                captures:
                    '1': {name: punctuation.definition.constant.tomb}
                    '3': {name: punctuation.definition.constant.tomb}
            -
                name: invalid.illegal.bad-ampersand.tomb
                match: '&'
    xml-comment:
        name: comment.block.tomb
        begin: '<!--'
        beginCaptures:
            '0':
                name: punctuation.definition.comment.tomb
        end: '-->'
        endCaptures:
            '0':
                name: punctuation.definition.comment.tomb
